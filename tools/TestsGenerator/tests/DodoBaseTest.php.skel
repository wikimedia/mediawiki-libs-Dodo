<?php

namespace Wikimedia\Dodo\Tests;

use PHPUnit\Framework\TestCase;
use Wikimedia\Dodo\Document;

/**
 * Class DodoBaseTest
 *
 * @package Wikimedia\Dodo\Tests
 */
abstract class DodoBaseTest extends TestCase {

	/**
	 * @var null|Document
	 */
	protected $doc;

	/**
	 * @var string
	 */
	protected $type_error;

	/**
	 * @var string
	 */
	protected $contentType;

	/**
	 * @param string $name
	 *
	 * @return mixed
	 */
	public function __get( string $name ) {
		if ( $name == 'title' ) {
			return $this->getTitle();
		}
	}

	/**
	 * @return mixed
	 */
	protected function getTitle() {
		return $this->doc->_documentElement->getFirstChild()->getNodeValue();
	}

	/**
	 *
	 */
	public function hasFeature() {
	}

	/**
	 * @param mixed $expected
	 * @param mixed $actual
	 *
	 * @return bool
	 */
	public function same( $expected, $actual ) : bool {
		return $expected === $actual;
	}

	/**
	 * @param mixed $closure
	 * @param mixed $type
	 */
	protected function test( $closure, $type ) {
	}

	/**
	 * @param mixed ...$args
	 */
	protected function assertThrowsDom( ...$args ) {
	}

	/**
	 *
	 */
	protected function assertThrowsJs() {
	}

	/**
	 *
	 */
	protected function setUp() : void {
		$this->doc = new Document( 'html' );
		$html = $this->doc->createElement( 'html' );
		$title = $this->doc->createElement( 'title' );
		$title->appendChild( $this->doc->createTextNode( 'NIST DOM HTML Test - Anchorasd fadsfadsf' ) );
		$html->appendChild( $title );
		$body = $this->doc->createElement( 'body' );

		$html->appendChild( $body );
		$this->doc->appendChild( $html );

		$this->contentType = 'text/html';
	}

	/**
	 *
	 */
	protected function tearDown() : void {
		$this->doc = null;
	}

	/**
	 * TODO implement this
	 *
	 * @param string $child
	 * @param string $nodeName
	 * @param string $innerHTML
	 */
	protected function testBefore( string $child, string $nodeName, string $innerHTML ) {
	}

	/**
	 * TODO implement this
	 *
	 * @param string $child
	 * @param string $nodeName
	 * @param string $innerHTML
	 */
	protected function testAfter( string $child, string $nodeName, string $innerHTML ) {
	}

	/**
	 * TODO implement this
	 *
	 * @param mixed ...$args
	 */
	protected function testConstructor( ...$args ) {
	}

	/**
	 * TODO implement this
	 *
	 * @param string $child
	 * @param string $nodeName
	 * @param string $innerHTML
	 */
	protected function testReplaceWith( string $child, string $nodeName, string $innerHTML ) {
	}

	/**
	 * TODO implement this
	 *
	 * @param mixed ...$args
	 */
	protected function asyncTestData( ...$args ) {
	}

	/**
	 * TODO implement this
	 *
	 * @see xhrResponseTypeDocumentTest.php
	 * @return mixed
	 */
	protected function xmlHttpRequest() {
		return null;
	}

	/**
	 * @param mixed ...$arg
	 */
	protected function attrIs( ...$arg ) {
	}

	/**
	 * @param mixed ...$arg
	 */
	protected function assertEqualsData( ...$arg ) {
	}

	/**
	 * @param mixed ...$arg
	 */
	protected function assertArrayEquals( ...$arg ) {
	}
}
