<?xml version="1.0" encoding="UTF-8"?>
<ruleset>
	<rule ref="./vendor/mediawiki/mediawiki-codesniffer/MediaWiki">
		<exclude name="MediaWiki.Commenting.MissingCovers.MissingCovers" />
		<exclude name="MediaWiki.WhiteSpace.SpaceBeforeSingleLineComment.NewLineComment" />
	</rule>
	<file>.</file>
	<arg name="encoding" value="UTF-8"/>
	<arg name="extensions" value="php"/>
	<exclude-pattern>coverage</exclude-pattern>
	<exclude-pattern>vendor</exclude-pattern>
	<exclude-pattern>doc/html</exclude-pattern>
	<exclude-pattern>.phan/stubs</exclude-pattern>

	<!-- No globals allowed! -->
	<rule ref="MediaWiki.NamingConventions.ValidGlobalName">
		<properties>
			<property name="allowedPrefixes[]" value="" />
		</properties>
	</rule>
	<rule ref="MediaWiki.NamingConventions.PrefixedGlobalFunctions">
		<properties>
			<property name="allowedPrefixes[]" value="" />
		</properties>
	</rule>

	<!--
		In our implementation code, we use a convention of
		prefixing with an underscore any non-WebIDL defined
		properties/methods/etc.  That makes it clear to a
		reader when we are departing from the spec, and ensures
		that future revisions of the DOM spec don't introduce
		method names that conflict with our implementation.
		These implementation members may need to be public
		to allow their use in other classes, but they should
		all be @internal!
		Only apply these exceptions to src/ code; our tools
		and other code shouldn't need to use underscore prefixes.
	-->
	<rule ref="PSR2.Classes.PropertyDeclaration.Underscore">
		<exclude-pattern>src</exclude-pattern>
	</rule>
	<rule ref="PSR2.Methods.MethodDeclaration.Underscore">
		<exclude-pattern>src</exclude-pattern>
	</rule>
	<rule ref="MediaWiki.NamingConventions.LowerCamelFunctionsName.FunctionName">
		<exclude-pattern>src</exclude-pattern>
	</rule>
	<!-- re-add a version of LowerCamelFunctionsName which is
	     tolerant of leading underscores -->
	<rule ref="Generic.NamingConventions.CamelCapsFunctionName">
		<properties>
			<property name="strict" value="false" />
		</properties>
	</rule>

</ruleset>
